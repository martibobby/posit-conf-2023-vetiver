---
title: Introduction
subtitle: Deploy and maintain models with vetiver (R)
format: html
---

## Explore the data 👀

```{r}
library(tidyverse)
library(arrow)
path <- here::here("data", "inspections.parquet")
inspections <- read_parquet(path)
glimpse(inspections)
```

Explore the `inspections` data on your own!

```{r}
inspections |> 
  count(results)
```

```{r}
## What’s the distribution of the outcome results?
dist_results <- inspections |>
  count(results)

## What’s the distribution of the numeric variable total_violations?
dist_total_violations <- inspections |>
  count(total_violations)

## How do results differ across facility type?
dist_results_by_facility <- inspections |>
  group_by(facility_type) |>
  count(results)

reactable(dist_results)
reactable(dist_total_violations)
reactable(dist_results_by_facility,groupBy = c("facility_type"), defaultExpanded = TRUE)


```

## Viewing some EDA
Let's see what this looks like:
```{r dist-visual}
# inspections |>
#   group_by(lubridate::year(inspection_date)) |> 
#   
#   ggplot(aes(inspectoin_date, results))

inspections |>
  ggplot(aes(inspection_date, total_violations, z = as.integer(results) - 1)) +
  stat_summary_hex(alpha = 0.7) +
  scale_fill_viridis_c(labels = scales::percent) +
  labs(fill = "% passed", x = NULL)
```

## Build a model 🔧

Spend your data budget:

```{r}
library(tidymodels)
set.seed(123)
inspect_split <- initial_split(inspections, prop = 0.8)
inspect_train <- training(inspect_split)
inspect_test <- testing(inspect_split)
```

Train a logistic regression model:

```{r}
inspection_rec <- 
  recipe(results ~ facility_type + risk + total_violations + inspection_date, 
         data = inspect_train) |> 
  step_date(inspection_date, features = c("month", "year"), keep_original_cols = FALSE)

inspection_fit <-
  workflow(inspection_rec, logistic_reg()) |> 
  fit(data = inspect_train)

tidy(inspection_fit)
```

## Create a deployable model object 🏺

```{r}
library(vetiver)
v <- vetiver_model(inspection_fit,
                   model_name = "inspections-result-rstats") #description = "A glm classification model " 
v
```
## Version your model 📌

```{r}
library(pins)

# setup temporary board
board <- board_temp()
board |> vetiver_pin_write(v)
```

```{r}
## retrieve your model metadata
board |> pin_meta("inspections-result-rstats")
```

## Publish your model on Posit Connect 🚀

Set up publishing to Connect from RStudio: <https://docs.posit.co/connect/user/publishing/>

```{r}
## now write your model pin to Posit Connect
board <- board_connect()
board |> vetiver_pin_write(v)
```

Visit your pin's homepage on Connect.

## Store a new version 👯

Train your model with a new algorithm:

```{r}
#boost_tree(engine = "xgboost", mode = "unknown")
# xgModel <- boost_tree() %>%
#   set_engine("xgboost") %>%
#   set_mode(mode = "regression")
# inspection_fit <-
#   workflow(inspection_rec, xgModel) |> 
#   fit(data = inspect_train)
```

Store this new model as a new version of the same pin:

```{r}
v <- vetiver_model(___, ___)
board |> ___(v)
```

What versions do you have?

```{r}
board |> pin_versions()
```
