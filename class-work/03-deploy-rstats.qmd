---
title: Deeper into deployment
subtitle: Deploy and maintain models with vetiver (R)
format: html
---

## Create your vetiver model üè∫

```{r}
library(tidyverse)
library(tidymodels)
library(arrow)
library(vetiver)
path <- here::here("data", "inspections.parquet")
inspections <- read_parquet(path)

set.seed(123)
inspect_split <- initial_split(inspections, prop = 0.8)
inspect_train <- training(inspect_split)
inspect_test <- testing(inspect_split)

inspection_rec <- 
  recipe(results ~ facility_type + risk + total_violations + inspection_date, 
         data = inspect_train) |> 
  step_date(inspection_date, features = c("month", "year"), keep_original_cols = FALSE)

inspection_fit <-
  workflow(inspection_rec, rand_forest(mode = "classification", trees = 1e3)) |> 
  fit(data = inspect_train)

v <- vetiver_model(inspection_fit, model_name = "rf-inspections-metadata")
v
```

## Docker üê≥

See `docker-rstats.qmd` in this same folder if you want to work along with the Docker demo.

## Model metrics as metadata üéØ

Compute metrics for your model:

```{r}
inspect_metric_set <- metric_set(accuracy, mn_log_loss, f_meas)
inspect_metrics <-
  augment(inspection_fit, new_data = inspect_test) |>
  inspect_metric_set(truth = results, estimate = .pred_class, .pred_FAIL)

inspect_metrics
```

Store these metrics as vetiver metadata:

```{r}
library(vetiver)
v <- vetiver_model(
  inspection_fit, 
  "rf-inspections-metadata", 
  metadata = list(metrics = inspect_metrics)
)
```

Write a new version of your pin:

```{r}
library(pins)
board <- board_rsconnect()
board |> vetiver_pin_write(v)
```

Get your metrics metadata:

```{r}
extracted_metrics <- 
  board |> 
  pin_meta("vetiver2023/rf-inspections-metadata") |> 
  pluck("user", "metrics") |> 
  as_tibble()

extracted_metrics
```

If you have time, redeploy your model and then get **your neighbor's** metrics metadata by calling the `/metadata` endpoint of their model:

```{r}
# redeploy metadata
#vetiver_deploy_rsconnect(board,  "vetiver2023/rf-inspections-metadata")

url <- "https://spectral-bullfinch.d01bf.fleeting.rstd.io/rsconnect/inspection-rf-api/metadata"
#url <- "https://quartz-shrimp.d01bf.fleeting.rstd.io/rsconnect/vetiver_rf_jrose/metadata
# statistical baselines, etc...
# repo, commit hash
r <- httr::content(httr::GET(url), as = "text", encoding = "UTF-8")
jsonlite::fromJSON(r) |> 
  pluck("user", "metrics") |> 
  as_tibble()
```

## Add a new endpoint to your API ‚ú®

Write a `plumber.R` file:

```{r}
vetiver_write_plumber(board, "vetiver2023/rf-inspections-metadata")
```

Open the file and run it locally; use the "Run API" button in RStudio.

Add a new endpoint to this file! 

One option is to add this function plus `library(lubridate)`:

```r
handler_weekday <- function(req) {
  wday(req$body$inspection_date, label = TRUE)
}
```

Change your `#* @plumber` decorated function so its body looks like:

```r
pr |>  
  vetiver_api(v) |> 
  pr_post(path = "/weekday", handler = handler_weekday)
```

After you add a new endpoint, run the API locally again.
