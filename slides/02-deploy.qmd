---
title: "2 - Deploy your model"
subtitle: "Deploy and maintain models with vetiver"
format:
  revealjs: 
    slide-number: true
    footer: <https://posit-conf-2023.github.io/vetiver>
    preview-links: auto
    incremental: true
    theme: [default]
    width: 1280
    height: 720
knitr:
  opts_chunk: 
    echo: true
    collapse: true
    comment: "#>"
---

```{r}
#| include: false
#| file: setup.R
```

## Plan for this workshop

::: nonincremental
-   *Versioning*
    -   Managing change in models ✅
-   *Deploying*
    -   Putting models in REST APIs 🎯
-   *Monitoring*
    -   Tracking model performance 👀
:::

## Fit a random forest 🌳🌴🌲🌲🌴🌳🌴🌳🌲

::: panel-tabset
### R

```{r}
library(tidymodels)
library(vetiver)
library(pins)

abalone <- readr::read_csv("abalone.csv")

set.seed(123)
ring_split <- initial_split(abalone, prop = 0.8, strata = rings)
ring_train <- training(ring_split)
ring_test <- testing(ring_split)

abalone_fit <-
  workflow(
    rings ~ ., 
    rand_forest(mode = "regression")
  ) |> 
  fit(data = ring_train) 
```

### Python

```{python}
import pandas as pd
import numpy as np
from sklearn import model_selection, preprocessing, ensemble, pipeline


abalone = pd.read_csv("abalone.csv")  

np.random.seed(123)
X, y = abalone.iloc[:,:8], abalone['rings']
X_train, X_test, y_train, y_test = model_selection.train_test_split(
    X, y,
    test_size = 0.2
)
le = preprocessing.OrdinalEncoder().fit(X_train)
rf = ensemble.RandomForestRegressor().fit(le.transform(X_train), y_train)
abalone_fit = pipeline.Pipeline([('label_encoder', le), ('random_forest', rf)])
```
:::

## Create your vetiver model and version

### R

```{r}
#| eval: false
library(vetiver)
library(pins)

v <- vetiver_model(abalone_fit, "abalone-rings-rstats")
board <- board_connect()
board |> vetiver_pin_write(v)
```

### Python

```{python}
#| eval: false
from vetiver import VetiverModel, vetiver_pin_write
import os
from dotenv import load_dotenv
load_dotenv()
api_key = os.getenv("CO_API_KEY")
rsc_url = os.getenv("CO_RSC_URL")

v = VetiverModel(abalone_fit, "abalone-rings-python", ptype_data = X_train)
board = board_connect(server_url=rsc_url, api_key=api_key, allow_pickle_read = True)
vetiver_pin_write(board, v)
```

## You can deploy your model as a...

. . .

::: r-fit-text
**REST API**
:::

## What is a REST API?

. . .

An **interface** that can **connect** applications in a **standard** way

## Create a vetiver REST API

### R

```{r}
#| eval: false
library(plumber)

pr() |>
  vetiver_api(v) |>
  pr_run()
```

### Python

```{python}
#| eval: false
api = VetiverAPI(v)
api.run()
```

## Your turn 🏺 {transition="slide-in"}

*Create a vetiver API for your model and run it locally.*

*Explore the visual documentation.*

*Discuss what you notice with your neighbor.*

```{r}
#| echo: false
countdown(minutes = 7)
```

## What does "deploy" mean?

![](https://github.com/isabelizimm/pydata-nyc2022/blob/main/images/deploy-cloud.jpg?raw=true)

## What does "deploy" mean?

![](https://github.com/isabelizimm/pydata-nyc2022/blob/main/images/deploy-not-here.jpg?raw=true)

# Where does vetiver work?

-   Posit's pro products, like [Connect](https://posit.co/products/enterprise/connect/)

-   AWS SageMaker (R only, for now)

-   A public or private cloud, using Docker

## Deploy to Posit Connect

### R

```{r}
#| eval: false
vetiver_deploy_rsconnect(board, "user.name/abalone-rings-rstats")
```

### Python

```{python}
#| eval: false
from rsconnect.api import RSConnectServer

connect_server = RSConnectServer(
    url=rsc_url, 
    api_key=api_key 
)

vetiver.deploy_rsconnect(
    connect_server = connect_server,
    board = board,
    pin_name = "user.name/abalone-rings-python",
)
```

